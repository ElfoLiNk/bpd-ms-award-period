# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - features/*
  paths:
    include:
      - api/*
      - app/*
      - core/*
      - integration/*
      - pom.xml

resources:
  - repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerfileRelativePath: 'dockerfiles/Dockerfile'

  # Agent VM image name
  vmImageNameBuild: 'ubuntu-latest'

  isToDeploy: $[and(ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))]

  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release/st') }}:
    dockerRegistryServiceConnection: '1b7900a3-6e8a-403a-b6ce-349854a5c6b8'
    containerRegistry: 'cstarregistry.azurecr.io'
    devOpsEnv: 'sit'
    deployment: deployment
    imageRepository: 'bpdmsawardperiod'
    vmImageNameDeploy: 'ubuntu-latest'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release/uat') }}:
    dockerRegistryServiceConnection: '0fd12f57-6169-4916-827b-8cc502e9340a'
    containerRegistry: 'cstaruatregistry.azurecr.io'
    devOpsEnv: 'uat-test'
    deployment: deployment
    imageRepository: 'bpdmsawardperiod'
    vmImageNameDeploy: 'uat-agent-latest'


stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameBuild)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings.xml'
              retryCount: '2'
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'deploy'
              options: '-B -s $(settingsxml.secureFilePath)'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              codeCoverageClassFilter: '+:it.gov.pagopa.**,-:**.*Config,-:**.model.**,-:**.enums.**,-:**.*Constants,-:**.*Application,-:**.*Test,-:**.*Test.**'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: Build and push an image to container registry
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                latest
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isToDeploy, true))
    jobs:
      - deployment: Deploy
        displayName: Deploy
        pool:
          vmImage: $(vmImageNameDeploy)
        environment: ${devOpsEnv}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(Build.BuildId)
